#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <omp.h>

namespace py = pybind11;


py::array_t<double> matrix_multiply(py::array_t<double> A, py::array_t<double> B) {
  //Read the numpy array buffers
  py::buffer_info A_buf = A.request();
  py::buffer_info B_buf = B.request();

  if(A_buf.ndim != 2 || B_buf.ndim != 2)
    throw std::runtime_error("Number of dimensions must be two");
  if(A_buf.shape[1] != B_buf.shape[0])
    throw std::runtime_error("Matrix dimensions do not match for multiplication");

  int nrows = A_buf.shape[0];
  int ncols = B_buf.shape[1];
  int nn = A_buf.shape[1];

  //Create a numpy array bufferto store the result
  py::array_t<double> result = py::array_t<double>({nrows,ncols});
  result[py::make_tuple(py::ellipsis())] = 0.f; //initialize to zeros
  py::buffer_info res_buf = result.request();

  //Create pointers to the buffers
  double *ptr_A = static_cast<double *>(A_buf.ptr);
  double *ptr_B = static_cast<double *>(B_buf.ptr);
  double *ptr_res = static_cast<double *>(res_buf.ptr);

  for(int i = 0; i < nrows; i++){
    for(int j = 0; j < ncols; j++){
      for(int k = 0; k < nn; k++)
	ptr_res[i*ncols+j] += ptr_A[i*nn+k] * ptr_B[k*ncols+j];  
    }
  }
  
  return result;
}


py::array_t<double> matrix_multiply_omp(py::array_t<double> A, py::array_t<double> B) {
  //Read the numpy array buffers
  py::buffer_info A_buf = A.request();
  py::buffer_info B_buf = B.request();

  if(A_buf.ndim != 2 || B_buf.ndim != 2)
    throw std::runtime_error("Number of dimensions must be two");
  if(A_buf.shape[1] != B_buf.shape[0])
    throw std::runtime_error("Matrix dimensions do not match for multiplication");

  int nrows = A_buf.shape[0];
  int ncols = B_buf.shape[1];
  int nn = A_buf.shape[1];

  //Create a numpy array bufferto store the result
  py::array_t<double> result = py::array_t<double>({nrows,ncols});
  result[py::make_tuple(py::ellipsis())] = 0.f; //initialize to zeros
  py::buffer_info res_buf = result.request();

  //Create pointers to the buffers
  double *ptr_A = static_cast<double *>(A_buf.ptr);
  double *ptr_B = static_cast<double *>(B_buf.ptr);
  double *ptr_res = static_cast<double *>(res_buf.ptr);

  //Perform the matrix multiplication
  #pragma omp parallel default(shared)
  {
    //if(omp_get_thread_num() == 0)
    //  printf("num threads: %d\n",omp_get_num_threads());
    #pragma omp for schedule(auto), collapse(2)
    for(int i = 0; i < nrows; i++){
      for(int j = 0; j < ncols; j++){
	for(int k = 0; k < nn; k++)
	  ptr_res[i*ncols+j] += ptr_A[i*nn+k] * ptr_B[k*ncols+j]; 
      }
    }
  }
  
  return result;
}


//Pybind11 module macro that creates an entry point that will be invoked
// when the python interpreter imports an extension module.
PYBIND11_MODULE(npmatmul, m) {
  m.doc() = "Pybind11 module that performs numpy array multiplication";
  m.def("matrix_multiply",&matrix_multiply,"Function that multiplies two matrices");
  m.def("matrix_multiply_omp",&matrix_multiply_omp,"Function that multiplies two matrices. Uses OMP");
}
